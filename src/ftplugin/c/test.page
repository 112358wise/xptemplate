


    /*  -------------Author--------------- */
    /* `$author^                           */



drdr.xp

drdr.xp

- drdr.xp =

drdr.xp


    /*  -------------invoke_--------------- */
    /* `name^(`wrapped^)                    */



name(WRAPPED_TEXT)

name_TYPED(WRAPPED_TEXT)

    - name(WRAPPED_TEXT) =

name(WRAPPED_TEXT)


    /*  -------------fun--------------- */
    /*   `int^                          */
    /* `name^(`p..^)                    */
    /* {                                */
    /*   `cursor^                       */
    /* }                                */



    int
name()
{
    
}

    int_TYPED
name_TYPED(p_TYPED, p_TYPED)
{
    
}

    -   int
name()
{
    
} =

    int
name()
{
    
}


    /*  -------------forr---------------                        */
    /* for (`i^ = `n^; `i^ >`^=^ `end^; --`i^) `$BRACKETSTYLE^{ */
    /*   `cursor^                                               */
    /* }                                                        */



for (i = n; i >= end; --i) {
    
}

for (i_TYPED = n_TYPED; i_TYPED >0_TYPED end_TYPED; --i_TYPED) {
    
}

- for (i = n; i >= end; --i) {
    
} =

for (i = n; i >= end; --i) {
    
}


    /*  -------------ifee---------------                                      */
    /* if (`condition^) `$BRACKETSTYLE^{                                      */
    /*   `job^                                                                */
    /* }`                                                                     */
    /* `...^ `$BRACKETSTYLE^else if (`cond^R("condition")^) `$BRACKETSTYLE^{  */
    /*   `job^                                                                */
    /* }`                                                                     */
    /* `...^                                                                  */



if (condition) {
    /* void */;
} else if (condition) { 
    /* void */;
} else if (condition) { 
    /* void */;
}

if (condition_TYPED) {
    job_TYPED
}
_TYPED

- if (condition) {
    /* void */;
} else if (condition) { 
    /* void */;
} else if (condition) { 
    /* void */;
} =

if (condition) {
    /* void */;
} else if (condition) { 
    /* void */;
} else if (condition) { 
    /* void */;
}


    /*  -------------forever--------------- */
    /* for (;;) `body^                      */



for (;;) /* void */;

for (;;) body_TYPED

- for (;;) /* void */; =

for (;;) /* void */;


    /*  -------------ifndef--------------- */
    /* ifndef `symbol^                     */
    /* #    define `symbol^                */
    /*                                     */
    /* `cursor^                            */
    /* #endif /* `symbol^ _cmt_            */



ifndef TEST 
#    define TEST 


#endif /* TEST */

ifndef SYMBOL_TYPED 
#    define SYMBOL_TYPED 


#endif /* SYMBOL_TYPED */

- ifndef TEST 
#    define TEST 


#endif /* TEST */ =

ifndef TEST 
#    define TEST 


#endif /* TEST */


    /*  -------------"--------------- */
    /* "`wrapped^"                    */



"WRAPPED_TEXT"

"WRAPPED_TEXT"

- "WRAPPED_TEXT" =

"WRAPPED_TEXT"


    /*  -------------'--------------- */
    /* '`wrapped^'                    */



'WRAPPED_TEXT'

'WRAPPED_TEXT'

- 'WRAPPED_TEXT' =

'WRAPPED_TEXT'


    /*  -------------(--------------- */
    /* (`wrapped^)                    */



(WRAPPED_TEXT)

(WRAPPED_TEXT)

    - (WRAPPED_TEXT) =

(WRAPPED_TEXT)


    /*  -------------ifproc_--------------- */
    /* #if `cond^0^                         */
    /* `wrapped^                            */
    /* `else...^#else                       */
    /* \`cursor\^^^                         */
    /* #endif                               */



#if 0
    WRAPPED_TEXT
#else
    
#endif

#if cond_TYPED
    WRAPPED_TEXT
    else_TYPED
#endif

    - #if 0
    WRAPPED_TEXT
#else
    
#endif =

#if 0
    WRAPPED_TEXT
#else
    
#endif


    /*  -------------<--------------- */
    /* <`wrapped^>                    */



    <WRAPPED_TEXT>

    <WRAPPED_TEXT>

    - <WRAPPED_TEXT> =

    <WRAPPED_TEXT>


    /*  -------------struct--------------- */
    /* struct `structName^                 */
    /* {                                   */
    /*     `type^ `field^;`                */
    /*     `...^                           */
    /*     `type^ `field^;`                */
    /*     `...^                           */
    /* } `var^^;                           */



    struct structName
{
    type field;
    type field;
    type field;
} ;

struct structName_TYPED
{
    type_TYPED field_TYPED;
    _TYPED
} var_TYPED;

- struct structName
{
    type field;
    type field;
    type field;
} ; =

struct structName
{
    type field;
    type field;
    type field;
} ;


    /*  -------------`--------------- */
    /* \``wrapped^\`                  */



`WRAPPED_TEXT`

`WRAPPED_TEXT`

- `WRAPPED_TEXT` =

`WRAPPED_TEXT`


    /*  -------------para--------------- */
    /* @param {`Object^} `name^ `desc^   */







-  =




    /*  -------------do---------------      */
    /* do `$BRACKETSTYLE^{                  */
    /*   `cursor^                           */
    /* } `$BRACKETSTYLE^while (`condition^) */



do {
    
} while (condition)

do {
    
} while (condition_TYPED)

- do {
    
} while (condition) =

do {
    
} while (condition)


    /*  -------------cc_--------------- */
    /* `$CL^ `wrapped^ `$CR^            */



/* WRAPPED_TEXT */

/* WRAPPED_TEXT */

- /* WRAPPED_TEXT */ =

/* WRAPPED_TEXT */


    /*  -------------[--------------- */
    /* [`wrapped^]                    */



[WRAPPED_TEXT]

[WRAPPED_TEXT]

- [WRAPPED_TEXT] =

[WRAPPED_TEXT]


    /*  -------------cmt---------------  */
    /* /**                               */
    /*  * @author : `$author^ | `$email^ */
    /*  * @description                   */
    /*  *     `cursor^                   */
    /*  * @return {`int^} `desc^         */
    /*  _cmt_                            */



/**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int} desc
 */

/**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int_TYPED} desc_TYPED
 */

- /**
   * @author : drdr.xp | drdr.xp@gmail.com
   * @description
   *     
   * @return {int} desc
   */ =

/**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int} desc
 */


    /*  -------------if0---------------                     */
    /* if (0 == `var^) `$BRACKETSTYLE^{                     */
    /*   `job^                                              */
    /* }`                                                   */
    /* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
    /*   \`cursor\^                                         */
    /* }^^                                                  */



if (0 == var) { 
    /* void */;
} else { 
    
}

if (0 == var_TYPED) { 
    job_TYPED
} 
else_TYPED

- if (0 == var) { 
    /* void */;
} else { 
    
} =

if (0 == var) { 
    /* void */;
} else { 
    
}


    /*  -------------ifn0---------------                    */
    /* if (0 != `var^) `$BRACKETSTYLE^{                     */
    /*   `job^                                              */
    /* }`                                                   */
    /* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
    /*   \`cursor\^                                         */
    /* }^^                                                  */



if (0 != var) { 
    /* void */;
} else { 
    
}

if (0 != var_TYPED) { 
    job_TYPED
} 
else_TYPED

- if (0 != var) { 
    /* void */;
} else { 
    
} =

if (0 != var) { 
    /* void */;
} else { 
    
}


    /*  -------------cc--------------- */
    /* `$CL^ `cursor^ `$CR^            */



/*  */

/*  */

- /*  */ =

/*  */


    /*  -------------cd--------------- */
    /* `$CL^`$CM^                      */
    /*  `$CM^ `cursor^                 */
    /*  `$CR^                          */



/**
 * 
 */

/**
 * 
 */

- /**
   * 
   */ =

/**
 * 
 */


    /*  -------------{--------------- */
    /* {`wrapped^}                    */



{WRAPPED_TEXT}

{WRAPPED_TEXT}

- {WRAPPED_TEXT} =

{WRAPPED_TEXT}


    /*  -------------filehead---------------                                  */
    /* /**-------------------------/// `sum^ \\\---------------------------   */
    /*  *                                                                     */
    /*  * <b>`function^</b>                                                   */
    /*  * @version : `1.0^                                                    */
    /*  * @since : `strftime("%Y %b %d")^                                     */
    /*  *                                                                     */
    /*  * @description :                                                      */
    /*  *   `cursor^                                                          */
    /*  * @usage :                                                            */
    /*  *                                                                     */
    /*  * @author : `$author^ | `$email^                                      */
    /*  * @copyright `.com.cn^                                                */
    /*  * @TODO :                                                             */
    /*  *                                                                     */
    /*  *--------------------------\\\ `sum^ ///---------------------------_cmt_ */



/**-------------------------/// sum \\\---------------------------
 *
 * <b>function</b>
 * @version : 1.0
 * @since : 2009 May 22
 * 
 * @description :
 *   
 * @usage : 
 * 
 * @author : drdr.xp | drdr.xp@gmail.com
 * @copyright .com.cn 
 * @TODO : 
 * 
 *--------------------------\\\ sum ///---------------------------*/

/**-------------------------/// sum_TYPED \\\---------------------------
 *
 * <b>function_TYPED</b>
 * @version : 10_TYPED
 * @since : 2009 May 22
 * 
 * @description :
 *   
 * @usage : 
 * 
 * @author : drdr.xp | drdr.xp@gmail.com
 * @copyright comcn_TYPED 
 * @TODO : 
 * 
 *--------------------------\\\ sum_TYPED ///---------------------------*/

- /**-------------------------/// sum \\\---------------------------
   *
   * <b>function</b>
   * @version : 1.0
   * @since : 2009 May 22
   * 
   * @description :
   *   
   * @usage : 
   * 
   * @author : drdr.xp | drdr.xp@gmail.com
   * @copyright .com.cn 
   * @TODO : 
   * 
   *--------------------------\\\ sum ///---------------------------*/ =

/**-------------------------/// sum \\\---------------------------
 *
 * <b>function</b>
 * @version : 1.0
 * @since : 2009 May 22
 * 
 * @description :
 *   
 * @usage : 
 * 
 * @author : drdr.xp | drdr.xp@gmail.com
 * @copyright .com.cn 
 * @TODO : 
 * 
 *--------------------------\\\ sum ///---------------------------*/


    /*  -------------once--------------- */
    /* #ifndef `symbol^                  */
    /* #define `symbol^                  */
    /* `cursor^                          */
    /* #endif /* `symbol^ _cmt_          */



#ifndef __TEST_PAGE__
#define __TEST_PAGE__

#endif /* __TEST_PAGE__ */

#ifndef symbol_TYPED
#define symbol_TYPED

#endif /* symbol_TYPED */

- #ifndef __TEST_PAGE__
#define __TEST_PAGE__

#endif /* __TEST_PAGE__ */ =

#ifndef __TEST_PAGE__
#define __TEST_PAGE__

#endif /* __TEST_PAGE__ */


    /*  -------------while0--------------- */
    /* do `$BRACKETSTYLE^{                 */
    /*   `cursor^                          */
    /* } `$BRACKETSTYLE^while (`$FALSE^)   */



do {
    
} while (0)

do {
    
} while (0)

- do {
    
} while (0) =

do {
    
} while (0)


    /*  -------------switch--------------- */
    /* switch (`var^) `$BRACKETSTYLE^{     */
    /*   case `_^ :                        */
    /*     `job^                           */
    /*     break;                          */
    /*   `...^                             */
    /*   case `_^ :                        */
    /*     `job^                           */
    /*     break;                          */
    /*   `...^                             */
    /*                                     */
    /*   `default...^default:              */
    /*     \`cursor\^^^                    */
    /* }                                   */



switch (var) {
    case _ :
        /* void */;
        break;

    case _ :
        /* void */;
        break;

    case _ :
        /* void */;
        break;


    default:
        
}

switch (var_TYPED) {
    case __TYPED :
        job_TYPED
                break;
        _TYPED 

                default_TYPED
}

- switch (var) {
    case _ :
        /* void */;
        break;

    case _ :
        /* void */;
        break;

    case _ :
        /* void */;
        break;


    default:
        
} =

switch (var) {
    case _ :
        /* void */;
        break;

    case _ :
        /* void */;
        break;

    case _ :
        /* void */;
        break;


    default:
        
}


    /*  -------------cb--------------- */
    /* `$CL^                           */
    /*  `$CM^ `cursor^                 */
    /*  `$CR^                          */



/*
 * 
 */

/*
 * 
 */

- /*
   * 
   */ =

/*
 * 
 */


    /*  -------------ifn---------------                     */
    /* if (`$NULL^ == `var^) `$BRACKETSTYLE^{               */
    /*   `job^                                              */
    /* }`                                                   */
    /* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
    /*   \`cursor\^                                         */
    /* }^^                                                  */



if (NULL == var) { 
    /* void */;
} else { 
    
}

if (NULL == var_TYPED) { 
    job_TYPED
} 
else_TYPED

- if (NULL == var) { 
    /* void */;
} else { 
    
} =

if (NULL == var) { 
    /* void */;
} else { 
    
}


    /*  -------------ifnn---------------                    */
    /* if (`$NULL^ != `var^) `$BRACKETSTYLE^{               */
    /*   `job^                                              */
    /* }`                                                   */
    /* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
    /*   \`cursor\^                                         */
    /* }^^                                                  */



if (NULL != var) { 
    /* void */;
} else { 
    
}

if (NULL != var_TYPED) { 
    job_TYPED
} 
else_TYPED

- if (NULL != var) { 
    /* void */;
} else { 
    
} =

if (NULL != var) { 
    /* void */;
} else { 
    
}


    /*  -------------for---------------                     */
    /* for (`i^ = `0^; `i^ < `len^; ++`i^) `$BRACKETSTYLE^{ */
    /*   `cursor^                                           */
    /* }                                                    */



for (i = 0; i < len; ++i) {
    
}

for (i_TYPED = 0_TYPED; i_TYPED < len_TYPED; ++i_TYPED) {
    
}

- for (i = 0; i < len; ++i) {
    
} =

for (i = 0; i < len; ++i) {
    
}


    /*  -------------if_--------------- */
    /* if (`condition^) {               */
    /*   `wrapped^                      */
    /* }                                */



if (condition) {
    WRAPPED_TEXT
}

if (condition_TYPED) {
    WRAPPED_TEXT
}

- if (condition) {
    WRAPPED_TEXT
} =

if (condition) {
    WRAPPED_TEXT
}


    /*  -------------assert--------------- */
    /* assert(`isTrue^, "`text^");         */



assert(isTrue, "text");

assert(isTrue_TYPED, "text_TYPED");

- assert(isTrue, "text"); =

assert(isTrue, "text");


    /*  -------------enum--------------- */
    /* enum `enumName^                   */
    /* {                                 */
    /*     `elem^`                       */
    /*     `...^,                        */
    /*     `subElem^`                    */
    /*     `...^                         */
    /* } `var^^;                         */



enum enumName
{
    elem,
    subElem,
    subElem
} ;

enum enumName_TYPED
{
    elem_TYPED
            _TYPED
} var_TYPED;

- enum enumName
{
    elem,
            subElem,
            subElem
} ; =

enum enumName
{
    elem,
    subElem,
    subElem
} ;


    /*  -------------inc--------------- */
    /* include <`^.h>                   */



include <.h>

include <_TYPED.h>

- include <.h> =

include <.h>


    /*  -------------ind--------------- */
    /* include "`me^.h"                 */



include "test.h"

include "me_TYPED.h"

- include "test.h" =

include "test.h"


    /*  -------------if---------------                      */
    /* if (`condi^) `$BRACKETSTYLE^{                        */
    /*   `job^                                              */
    /* }`                                                   */
    /* `else...`^\`$BRACKETSTYLE\^ else \`$BRACKETSTYLE\^{  */
    /*   \`cursor\^                                         */
    /* }^^                                                  */



if (condi) { 
    /* void */;
} else { 
    
}

if (condi_TYPED) { 
    job_TYPED
} 
else_TYPED

- if (condi) { 
    /* void */;
} else { 
    
} =

if (condi) { 
    /* void */;
} else { 
    
}


    /*  -------------Email--------------- */
    /* `$email^                           */



drdr.xp@gmail.com

drdr.xp@gmail.com

- drdr.xp@gmail.com =

drdr.xp@gmail.com


    /*  -------------cl--------------- */
    /* `$CL^ `cursor^ `$CR^            */



/*  */

/*  */

- /*  */ =

/*  */


    /*  -------------while1--------------- */
    /* while (`$TRUE^) `$BRACKETSTYLE^{    */
    /*   `cursor^                          */
    /* }                                   */



while (1) {
    
}

while (1) {
    
}

- while (1) {
    
} =

while (1) {
    
}


    /*  -------------main--------------- */
    /*   int                             */
    /* main(int argc, char **argv)       */
    /* {                                 */
    /*   `cursor^                        */
    /*   return 0;                       */
    /* }                                 */



    int
main(int argc, char **argv)
{
    
    return 0;
}

    int
main(int argc, char **argv)
{
    
    return 0;
}

    -   int
main(int argc, char **argv)
{
    
    return 0;
} =

    int
main(int argc, char **argv)
{
    
    return 0;
}


    /*  -------------File--------------- */
    /* `file()^                          */



test.page

test.page

- test.page =

test.page


    /*  -------------bitfield--------------- */
    /* struct `structName^                   */
    /* {                                     */
    /*     `type^ `field^ : `bits^;`         */
    /*     `...^                             */
    /*     `type^ `field^ : `bits^;`         */
    /*     `...^                             */
    /* } `var^^;                             */



struct structName
{
    type field : bits;
    type field : bits;
    type field : bits;
} ;

struct structName_TYPED
{
    type_TYPED field_TYPED : bits_TYPED;
    _TYPED
} var_TYPED;

- struct structName
{
    type field : bits;
    type field : bits;
    type field : bits;
} ; =

struct structName
{
    type field : bits;
    type field : bits;
    type field : bits;
} ;

